CS-474
Billy Dang
Sean Mckean
Hassan Hamod

NOTE: Remember to convert to PDF for submission

Pseudocode

algorithm 1:

User inputs number of rows (n) and number of events/columns (m)

Check if the user input satifies the conditions
where n is greater than 1 and less than or equal to 5

if so, create P_board otherwise try again

for x = 0 to n
  for y = 0 to m
    get users to input event values

Calculate logical Clock Problem:
/////////////////////////////////////////////////////////////////////////////////////////////////
Input: An MxN array which contains event commands represented by a single character
       or a send or recieve function denoted by 's#' and 'r#', where # is a digit 1-9.

Output:An MxN array containing the integer values which represent the number of steps through each command.
/////////////////////////////////////////////////////////////////////////////////////////////////


Pboard[M][N] // countains array of MxN events, events have message values(char) and time values(int)


for i in M: // loop through each process
{
time = 1     // time is our int value which gets reset to 1 every process row

  for j in N: // loop through each event in each process
    {
    if(Pboard[i][j].message == <regular event>) //checks for events that arent send or recieve
      Pboard[i][j].timevalue = time
      time += 1

    else if (Pboard[i][j]message == <send event>)
      Pboard[i][j].timevalue = time
      time += 1
      <SAVE SEND EVENT TIMEVALUE FOR LATER USE BY RECIEVE>
      <TELL OUTER LOOP TO GO THROUGH AGAIN FOR UPDATED SEND VALUE>

    else if (Pboard[i][j]message == <recieve event>)
       if (<TIMEVALUE FOR CORRESPONDING SEND EXISTS>)
         Pboard[i][j].timevalue = <THE MAX VALUE OF CORRESPONDING SEND OR CURRENT TIMEVALUE>
         time = Pboard[i][j].timevalue // this updates the current process row to the current time clock after the recieve function
         time += 1
       else
         Pboard[i][j].timevalue = 0  // if there is no corresponding send event for the recieve, assign it a 0;
     }
}



algorithm 2:

user inputs number of rows (n) and number of events/columns (m)

Check if the user input satifies the conditions
where n is greater than 1 and less than or equal to 5

if so, create P_board otherwise try again

for x = 0 to n
  for y = 0 to m
    get users to input integer values

Calculate logical Clock Problem:
/////////////////////////////////////////////////////////////////////////////////////////////////
Input: An MxN array which contains integer clock values

Output:An MxN array containing the event values which represent the strings
/////////////////////////////////////////////////////////////////////////////////////////////////

sort the list of integers
